# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
version: '3.8'    # Stable version

services:         # Application Service 
  app:
    build: .
    ports:
      - "8080:8080"       # Building the FastAPI application from the Dockerfile in the current directory (.)
    volumes:
      - .:/app            # Mount the current directory into the container  
      - ./logs:/app/logs  # Mount the logs directory into the container
    environment:
      - PYTHONUNBUFFERED=1              # ensures that Python outputs logs in real-time by disabling output buffering.
      - GROQ_API_KEY=${GROQ_API_KEY}    # Get the values from the .env file
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - QDRANT_API_KEY=${QDRANT_API_KEY}
      - QDRANT_HOST=${QDRANT_HOST}
      - MONGODB_URI=${MONGODB_URI}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
    depends_on:
      - mongo       # Ensures MongoDB starts before the FastAPI app.
    command: uvicorn main:app --host 0.0.0.0 --port 8080 --reload
  
  mongo:
    image: mongo:6.0    # Uses the MongoDB 6.0 official image.
    ports:
      - "27017:27017"    # Maps MongoDBâ€™s default port (27017) to the host.
    volumes:
      - mongodb_data:/data/db     # Persists MongoDB data in a named Docker volume (mongodb_data).
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root   # Sets MongoDB admin credentials.
      - MONGO_INITDB_ROOT_PASSWORD=example

  mongo-express:
    image: mongo-express    # Uses the official Mongo Express image for easy Database Management, quick Setup for Development
    ports:
      - "8081:8081"         # Maps Mongo Express's default port (8081) to the host.
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root    # Sets Mongo Express admin credentials
      - ME_CONFIG_MONGODB_ADMINPASSWORD=example
      - ME_CONFIG_MONGODB_SERVER=mongo
    depends_on:
      - mongo       # Ensures MongoDB starts before Mongo Express.

volumes:
  mongodb_data:    # Named volume for MongoDB

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

